// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231210060021_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DataSetId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("DataSetId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CrisprOutViewModel", b =>
                {
                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GRNA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sequence")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("CrisprOutViewModels");
                });

            modelBuilder.Entity("Domain.Models.DNASequence", b =>
                {
                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sequence")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("DNASequence", (string)null);
                });

            modelBuilder.Entity("Domain.Models.DataSet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<float?>("Accuracy")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Licenses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepositoryURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("DataSet", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Model", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<float?>("Accuracy")
                        .HasColumnType("real");

                    b.Property<int?>("DataSetId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Licenses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepositoryURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("DataSetId");

                    b.ToTable("Model", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Prop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Prop", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DataSetId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DataSetId");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.HasOne("Domain.Models.DataSet", null)
                        .WithMany("Comments")
                        .HasForeignKey("DataSetId");
                });

            modelBuilder.Entity("Domain.Models.Model", b =>
                {
                    b.HasOne("Domain.Models.DataSet", null)
                        .WithMany("Models")
                        .HasForeignKey("DataSetId");
                });

            modelBuilder.Entity("Domain.Models.Prop", b =>
                {
                    b.HasOne("Domain.Models.DataSet", "DataSet")
                        .WithMany("Props")
                        .HasForeignKey("ModelId");

                    b.Navigation("DataSet");
                });

            modelBuilder.Entity("Domain.Models.Tag", b =>
                {
                    b.HasOne("Domain.Models.DataSet", "DataSet")
                        .WithMany("Tags")
                        .HasForeignKey("DataSetId");

                    b.Navigation("DataSet");
                });

            modelBuilder.Entity("Domain.Models.DataSet", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Models");

                    b.Navigation("Props");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
